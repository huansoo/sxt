package com.wugu.zhaopin.dao.impl;

import com.wugu.zhaopin.dao.ZpUserDAO;
import com.wugu.zhaopin.vo.ZpUser;
import com.wugu.zhaopin.vo.ZpUserCriteria;
import java.util.List;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;
import com.ibatis.sqlmap.client.SqlMapClient;
import java.sql.SQLException;

public class ZpUserDAOImpl implements ZpUserDAO {

    /**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    private SqlMapClient sqlMapClient;

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public ZpUserDAOImpl(SqlMapClient sqlMapClient)
    {
        super();
        this.sqlMapClient = sqlMapClient;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public int countByExample(ZpUserCriteria example) throws SQLException
    {
        Integer count = (Integer) sqlMapClient.queryForObject(
                "zp_user.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public int deleteByExample(ZpUserCriteria example) throws SQLException
    {
        int rows = sqlMapClient.delete(
                "zp_user.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public int deleteByPrimaryKey(Long userId) throws SQLException
    {
        ZpUser key = new ZpUser();
        key.setUserId(userId);
        int rows = sqlMapClient.delete(
                "zp_user.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public void insert(ZpUser record) throws SQLException
    {
        sqlMapClient.insert("zp_user.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public void insertSelective(ZpUser record) throws SQLException
    {
        sqlMapClient.insert("zp_user.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    @SuppressWarnings("unchecked")
    public List<ZpUser> selectByExample(ZpUserCriteria example)
            throws SQLException
    {
        List<ZpUser> list = sqlMapClient.queryForList(
                "zp_user.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public ZpUser selectByPrimaryKey(Long userId) throws SQLException
    {
        ZpUser key = new ZpUser();
        key.setUserId(userId);
        ZpUser record = (ZpUser) sqlMapClient.queryForObject(
                "zp_user.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public int updateByExampleSelective(ZpUser record, ZpUserCriteria example)
            throws SQLException
    {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update(
                "zp_user.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public int updateByExample(ZpUser record, ZpUserCriteria example)
            throws SQLException
    {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = sqlMapClient.update(
                "zp_user.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public int updateByPrimaryKeySelective(ZpUser record) throws SQLException
    {
        int rows = sqlMapClient.update(
                "zp_user.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    public int updateByPrimaryKey(ZpUser record) throws SQLException
    {
        int rows = sqlMapClient.update(
                "zp_user.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database table zp_user
     * @ibatorgenerated  Thu Dec 26 19:21:47 CST 2013
     */
    private static class UpdateByExampleParms extends ZpUserCriteria
    {
        private Object record;

        public UpdateByExampleParms(Object record, ZpUserCriteria example)
        {
            super(example);
            this.record = record;
        }

        public Object getRecord()
        {
            return record;
        }
    }
}